version: "3"



dotenv: [".env"]

tasks:
  tag:
    desc: Tag the git repo with the version specified in the VERSION file.
    cmds:
    - git tag {{ .VERSION }}
    - git push origin {{ .VERSION }}
    vars:
      VERSION:
        sh: cat VERSION | head -n 1 | tr -d '\n'

  telegraf.clone:
    desc: Clone the telegraf repo at a specific tag
    cmds:
      - cd /tmp && rm -rf telegraf && git clone --depth 1 --branch {{.TELEGRAF_VERSION}} https://github.com/influxdata/telegraf.git
    status:
      - test -d /tmp/telegraf/
    sources:
      - ./TELEGRAF_VERSION
    vars:
      TELEGRAF_VERSION:
        sh: head -n 1 ./TELEGRAF_VERSION | tr -d '\n'

  telegraf.build:
    desc: Build telegraf
    deps:
      - telegraf.clone
    cmds:
      - cd /tmp/telegraf && make build
    generates:
      - /tmp/telegraf/telegraf
    env:
      GOOS: linux
      GOARCH: amd64

  telegraf:
    desc: Copy telegraf artifact
    deps: [telegraf.build]
    cmds:
    - cp /tmp/telegraf/telegraf ./files/usr/bin/lambda/

  build.snapshot:
    desc: Build only the binary artifacts. Ignore dirty git states.
    cmds:
      - goreleaser build --clean --snapshot
    requires:
      vars:
      - GITHUB_TOKEN
  build:
    desc: Build only the binary artifacts.
    cmds:
    - goreleaser build --clean
    requires:
      vars:
      - GITHUB_TOKEN
  release:
    desc: Build binaries, create .deb files, and upload/release the artifacts.
    deps: [telegraf]
    cmds:
    - goreleaser release --clean
    requires:
      vars:
      - ARTIFACTORY_SECRET
      - GITHUB_TOKEN
  release.snapshot:
    desc: Build binaries, create .deb files. Ignore dirty git states.
    cmds:
    - goreleaser release --snapshot --clean
    requires:
      vars:
      - GITHUB_TOKEN
