version: "3"

dotenv: ["guest-agent.env"]

tasks:
  mkdir:
    requires: 
      vars: [DIR]
    cmds:
      - mkdir -p {{.DIR}}

  build-tools:
    desc: Build tools directory
    cmds:
    - cd ./tools && go build -o tools .

  tag:
    desc: Tag the git repo with the version specified in the VERSION file.
    deps: [build-tools]
    cmds:
    - ./tools/tools tag --dry-run=false
  
  install-deps:
    desc: Install tool dependencies
    dir: '{{.ROOT_DIR}}/tools'
    cmds:
    - cat external-tools/tools.go | grep _ | awk -F'"' '{print $2}' | xargs -tI % go install %
  
  tag.push:
    desc: Push tags to origin
    cmds:
    - git push origin --tags

  telegraf.clone:
    desc: Clone the telegraf repo at a specific tag
    deps:
    - task: mkdir
      vars:
        DIR: ./build
    cmds:
      - cd ./build && rm -rf telegraf/ && git clone --depth 1 --branch {{.TELEGRAF_VERSION}} https://github.com/influxdata/telegraf.git
    vars:
      TELEGRAF_VERSION:
        sh: head -n 1 ./TELEGRAF_VERSION | tr -d '\n'

  build.telegraf:
    desc: Build telegraf
    deps:
      - telegraf.clone
      - build.templates
    cmds:
      - cd $GUEST_AGENT_TELEGRAF_BUILD_DIR && make build_tools
      - cd $GUEST_AGENT_TELEGRAF_BUILD_DIR && ./tools/custom_builder/custom_builder --config ../../build/files/$GUEST_AGENT_TELEGRAF_CONF
      - mkdir -p ./build/files/$GUEST_AGENT_LAMBDA_BIN_DIR
      - mv $GUEST_AGENT_TELEGRAF_BUILD_DIR/telegraf $GUEST_AGENT_TEMPLATES_OUTDIR/$GUEST_AGENT_LAMBDA_BIN_DIR/telegraf
    generates:
      - ./build/files/$GUEST_AGENT_LAMBDA_BIN_DIR/telegraf
    env:
      GOOS: linux
      GOARCH: amd64

  build.templates:
    desc: Render configuration templates
    deps: [build-tools]
    cmds:
      - ./tools/tools render_template

  build.clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf ./build
      - rm -rf ./dist

  build:
    desc: Build only the binary artifacts.
    cmds:
      - task: build.clean
      - task: build.telegraf
      - goreleaser build
    requires:
      vars:
      - GITHUB_TOKEN

  release.staging:
    desc: Build binaries, create .deb files, and upload/release the artifacts.
    cmds:
    - task: build
    - goreleaser release --clean
    requires:
      vars:
      - GITHUB_TOKEN

  release.snapshot:
    desc: Build binaries, create .deb files. Ignore dirty git states.
    cmds:
    - goreleaser release --snapshot
    requires:
      vars:
      - GITHUB_TOKEN

  deb-s3.upload:
    desc: Upload file using deb-s3 to S3 bucket
    cmds:
      - deb-s3 upload --bucket lambdalabs-guest-agent --visibility=nil ./dist/lambda-guest-agent*.deb --sign CA708F1FBA73322E33FCB652891A94BE192FD853

  release.prod:
    desc: Promote to the prod S3 repo
    cmds:
      - task: deb-s3.upload
  
  release:
    desc: RELEASE EVEYTHING!
    cmds:
      - task: release.staging
      - task: release.prod

  e2e:
    desc: Upload everywhere!
    cmds:
      - git commit -m "update"
      - git push
      - task: tag
      - task: release
      - task: deb-s3.upload